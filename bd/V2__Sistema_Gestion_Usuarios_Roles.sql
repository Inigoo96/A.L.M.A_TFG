-- =====================================================
-- V2: SISTEMA DE GESTIÓN DE USUARIOS - ROLES Y RELACIONES
-- Extiende el sistema con roles (Profesional, Paciente) y sus relaciones.
-- =====================================================

-- =====================================================
-- TABLA: PROFESIONAL
-- =====================================================
CREATE TABLE PROFESIONAL (
    ID_PROFESIONAL SERIAL,
    ID_USUARIO INTEGER NOT NULL,
    NUMERO_COLEGIADO VARCHAR(20),
    ESPECIALIDAD VARCHAR(100),
    CENTRO_SALUD VARCHAR(255),
    FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_ULTIMA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT PK_PROFESIONAL PRIMARY KEY (ID_PROFESIONAL),
    CONSTRAINT UQ_ID_USUARIO_PROFESIONAL UNIQUE (ID_USUARIO),
    CONSTRAINT UQ_NUMERO_COLEGIADO UNIQUE (NUMERO_COLEGIADO),
    CONSTRAINT FK_PROFESIONAL_USUARIO FOREIGN KEY (ID_USUARIO)
        REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE INDEX idx_profesional_colegiado ON PROFESIONAL(NUMERO_COLEGIADO);
CREATE INDEX idx_profesional_especialidad ON PROFESIONAL(ESPECIALIDAD);

-- =====================================================
-- TABLA: PACIENTE
-- =====================================================
CREATE TABLE PACIENTE (
    ID_PACIENTE SERIAL,
    ID_USUARIO INTEGER NOT NULL,
    TARJETA_SANITARIA VARCHAR(30),
    FECHA_NACIMIENTO DATE,
    GENERO VARCHAR(30),
    FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_ULTIMA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT PK_PACIENTE PRIMARY KEY (ID_PACIENTE),
    CONSTRAINT UQ_ID_USUARIO_PACIENTE UNIQUE (ID_USUARIO),
    CONSTRAINT CK_GENERO CHECK (GENERO IN ('MASCULINO', 'FEMENINO', 'NO_BINARIO', 'PREFIERO_NO_DECIR')),
    CONSTRAINT FK_PACIENTE_USUARIO FOREIGN KEY (ID_USUARIO)
        REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE INDEX idx_paciente_tarjeta ON PACIENTE(TARJETA_SANITARIA);
CREATE INDEX idx_paciente_fecha_nacimiento ON PACiente(FECHA_NACIMIENTO);

-- =====================================================
-- TABLA: ASIGNACION_PROFESIONAL_PACIENTE
-- =====================================================
CREATE TABLE ASIGNACION_PROFESIONAL_PACIENTE (
    ID_ASIGNACION SERIAL,
    ID_PROFESIONAL INTEGER NOT NULL,
    ID_PACIENTE INTEGER NOT NULL,
    ACTIVA BOOLEAN DEFAULT TRUE,
    FECHA_ASIGNACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_FINALIZACION TIMESTAMP,
    NOTAS TEXT,
    FECHA_ULTIMA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT PK_ASIGNACION PRIMARY KEY (ID_ASIGNACION),
    CONSTRAINT FK_ASIGNACION_PROFESIONAL FOREIGN KEY (ID_PROFESIONAL)
        REFERENCES PROFESIONAL(ID_PROFESIONAL) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_ASIGNACION_PACIENTE FOREIGN KEY (ID_PACIENTE)
        REFERENCES PACIENTE(ID_PACIENTE) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_ASIGNACION_ACTIVA UNIQUE (ID_PROFESIONAL, ID_PACIENTE, ACTIVA)
);

-- ALTER TABLE EN ORDEN CORRECTO
ALTER TABLE asignacion_profesional_paciente RENAME COLUMN ACTIVA TO activo;
ALTER TABLE asignacion_profesional_paciente ADD COLUMN es_principal BOOLEAN DEFAULT FALSE;

CREATE INDEX idx_asignacion_profesional ON ASIGNACION_PROFESIONAL_PACIENTE(ID_PROFESIONAL);
CREATE INDEX idx_asignacion_paciente ON ASIGNACION_PROFESIONAL_PACIENTE(ID_PACIENTE);
CREATE INDEX idx_asignacion_activa ON ASIGNACION_PROFESIONAL_PACIENTE(activo);
CREATE INDEX idx_asignacion_fecha ON ASIGNACION_PROFESIONAL_PACIENTE(FECHA_ASIGNACION);

-- =====================================================
-- TABLA: ADMIN_ORGANIZACION
-- =====================================================
CREATE TABLE ADMIN_ORGANIZACION (
    ID_ADMIN SERIAL,
    ID_USUARIO INTEGER NOT NULL,
    ID_ORGANIZACION INTEGER NOT NULL,

    CONSTRAINT PK_ADMIN_ORGANIZACION PRIMARY KEY (ID_ADMIN),
    CONSTRAINT UQ_ID_USUARIO_ADMIN_ORG UNIQUE (ID_USUARIO),
    CONSTRAINT FK_ADMIN_USUARIO FOREIGN KEY (ID_USUARIO)
        REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK_ADMIN_ORGANIZACION FOREIGN KEY (ID_ORGANIZACION)
        REFERENCES ORGANIZACION(ID_ORGANIZACION)
);

-- =====================================================
-- TABLA: SESION_INTERACCION (para futuro uso con IA)
-- =====================================================
CREATE TABLE SESION_INTERACCION (
    ID_SESION SERIAL,
    ID_PACIENTE INTEGER NOT NULL,
    ID_PROFESIONAL INTEGER,
    FECHA_INICIO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_FIN TIMESTAMP,
    DURACION_SEGUNDOS INTEGER,
    TIPO_SESION VARCHAR(20) DEFAULT 'CONVERSACION',
    ESTADO VARCHAR(20) DEFAULT 'ACTIVA',
    NUMERO_MENSAJES INTEGER DEFAULT 0,
    SATISFACCION INTEGER,
    NOTAS_PROFESIONAL TEXT,
    FECHA_ULTIMA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT PK_SESION_INTERACCION PRIMARY KEY (ID_SESION),
    CONSTRAINT CK_TIPO_SESION CHECK (TIPO_SESION IN ('CONVERSACION', 'EVALUACION', 'TERAPIA')),
    CONSTRAINT CK_ESTADO_SESION CHECK (ESTADO IN ('ACTIVA', 'FINALIZADA', 'INTERRUMPIDA')),
    CONSTRAINT CK_SATISFACCION CHECK (SATISFACCION >= 1 AND SATISFACCION <= 5),
    CONSTRAINT FK_SESION_PACIENTE FOREIGN KEY (ID_PACIENTE)
        REFERENCES PACIENTE(ID_PACIENTE) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_SESION_PROFESIONAL FOREIGN KEY (ID_PROFESIONAL)
        REFERENCES PROFESIONAL(ID_PROFESIONAL) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE INDEX idx_sesion_paciente ON SESION_INTERACCION(ID_PACIENTE);
CREATE INDEX idx_sesion_profesional ON SESION_INTERACCION(ID_PROFESIONAL);
CREATE INDEX idx_sesion_fecha_inicio ON SESION_INTERACCION(FECHA_INICIO);
CREATE INDEX idx_sesion_estado ON SESION_INTERACCION(ESTADO);
CREATE INDEX idx_sesion_tipo ON SESION_INTERACCION(TIPO_SESION);

-- =====================================================
-- VISTAS ÚTILES
-- =====================================================

CREATE OR REPLACE VIEW v_usuarios_completo AS
SELECT
    u.ID_USUARIO, u.DNI, u.EMAIL, u.NOMBRE, u.APELLIDOS, u.TELEFONO, u.TIPO_USUARIO, u.ACTIVO, u.PASSWORD_TEMPORAL, u.CARGO, u.FECHA_REGISTRO, u.ULTIMO_ACCESO,
    o.ID_ORGANIZACION, o.NOMBRE_OFICIAL AS NOMBRE_ORGANIZACION, o.CIF AS CIF_ORGANIZACION, o.ESTADO_VERIFICACION AS ESTADO_ORGANIZACION
FROM USUARIO u
INNER JOIN ORGANIZACION o ON u.ID_ORGANIZACION = o.ID_ORGANIZACION;

CREATE OR REPLACE VIEW v_profesionales_completo AS
SELECT
    p.ID_PROFESIONAL, p.NUMERO_COLEGIADO, p.ESPECIALIDAD, p.CENTRO_SALUD,
    u.ID_USUARIO, u.DNI, u.EMAIL, u.NOMBRE, u.APELLIDOS, u.TELEFONO, u.ACTIVO,
    o.ID_ORGANIZACION, o.NOMBRE_OFICIAL AS NOMBRE_ORGANIZACION, o.ESTADO_VERIFICACION AS ESTADO_ORGANIZACION
FROM PROFESIONAL p
INNER JOIN USUARIO u ON p.ID_USUARIO = u.ID_USUARIO
INNER JOIN ORGANIZACION o ON u.ID_ORGANIZACION = o.ID_ORGANIZACION;

CREATE OR REPLACE VIEW v_pacientes_completo AS
SELECT
    pac.ID_PACIENTE, pac.TARJETA_SANITARIA, pac.FECHA_NACIMIENTO, pac.GENERO,
    u.ID_USUARIO, u.DNI, u.EMAIL, u.NOMBRE, u.APELLIDOS, u.TELEFONO, u.ACTIVO,
    o.ID_ORGANIZACION, o.NOMBRE_OFICIAL AS NOMBRE_ORGANIZACION
FROM PACIENTE pac
INNER JOIN USUARIO u ON pac.ID_USUARIO = u.ID_USUARIO
INNER JOIN ORGANIZACION o ON u.ID_ORGANIZACION = o.ID_ORGANIZACION;

-- =====================================================
-- TRIGGERS PARA AUDITORÍA AUTOMÁTICA
-- =====================================================

CREATE TRIGGER trigger_profesional_modificacion
    BEFORE UPDATE ON PROFESIONAL
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_paciente_modificacion
    BEFORE UPDATE ON PACIENTE
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_asignacion_modificacion
    BEFORE UPDATE ON ASIGNACION_PROFESIONAL_PACIENTE
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_sesion_modificacion
    BEFORE UPDATE ON SESION_INTERACCION
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

-- =====================================================
-- FIN DE MIGRACIÓN V2
-- =====================================================
